using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.SceneManagement;namespace RedTeam.PewPew {    public class GameController : GameEventListener {        GameManager _gameManager;        GameManager GameManager {            get {                if (_gameManager == null)                    _gameManager = EventManager.Request<GameManager>("GameManager");                return _gameManager;            }        }

        IEngine CurrentEngine {            get {                return EventManager.Request<IEngine>("CurrentEngine");            }        }        TransitionManager _transitionManager;        TransitionManager TransitionManager {            get {                if (_transitionManager == null)                    _transitionManager = EventManager.Request<TransitionManager>("TransitionManager");                return _transitionManager;            }        }        HUDController _hudController;        HUDController HUDController {            get {                if (_hudController == null)                    _hudController = EventManager.Request<HUDController>("HUDController");                return _hudController;            }        }        PewPewGameConfig _config;        PewPewGameConfig Config {            get {                if (_config == null)                    _config = (PewPewGameConfig)EventManager.Request<GameConfig>("GameConfig");                return _config;            }        }        public string levelSelectScene = "Ship Select";        public string mainMenuScene = "Main Menu";        public int HeartsLeft {            get {                return _heartsLeft;            }            set {                _heartsLeft = value;                HUDController.UpdateHeartDisplay(value);            }        }        public int LivesLeft {            get {                return _livesLeft;            }            set {                _livesLeft = value;                HUDController.UpdateLivesDisplay(value);            }        }        public bool ShieldUp {            get {                return _shieldUp;            }            set {                _shieldUp = value;                HUDController.SetShieldActive(value);            }        }        int _heartsLeft = 3;        int _livesLeft = 3;        bool _shieldUp = true;        public void LoseHeart() {            if (ShieldUp) {                ShieldUp = false;                return;            }            HeartsLeft--;            if (HeartsLeft < 1) {                LivesLeft--;                if (LivesLeft < 1) {                    EventManager.TriggerBroadcast("RestartGame");                    return;                }                HeartsLeft = 3;                StartCoroutine(TransitionManager.Transition(SceneManager.GetActiveScene().name, SceneManager.GetActiveScene().name));            }        }        public void RestartGame() {            if (_paused)                CurrentEngine.ResumeGame();            StartCoroutine(TransitionManager.Transition(SceneManager.GetActiveScene().name, SceneManager.GetActiveScene().name));        }        public void QuitGame() {            if(_paused)                CurrentEngine.ResumeGame();            GameManager.SetCurrentEngine(Config.initialEngineData);        }        protected override void OnStartGame() {            base.OnStartGame();            Cursor.visible = false;            Cursor.lockState = CursorLockMode.Locked;            HUDController.UpdateHeartDisplay(HeartsLeft);            HUDController.UpdateLivesDisplay(LivesLeft);            HUDController.SetShieldActive(ShieldUp);        }        protected override void OnPauseGame() {            base.OnPauseGame();            Cursor.visible = true;            Cursor.lockState = CursorLockMode.None;            Time.timeScale = 0.0f;        }        protected override void OnResumeGame() {            base.OnResumeGame();            Cursor.visible = false;            Cursor.lockState = CursorLockMode.Locked;            Time.timeScale = 1.0f;        }        protected override void Awake() {            EventManager.AddRequest<GameController>("GameController", () => this);            EventManager.AddBroadcastListener("PlayerHit", LoseHeart);            base.Awake();        }        protected override void OnDestroy() {            EventManager.RemoveRequest<GameController>("GameController");            EventManager.RemoveBroadcastListener("PlayerHit", LoseHeart);            base.OnDestroy();        }    }}